from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Any, Dict, NoReturn, ClassVar, Tuple, Union

from django.contrib.auth.models import Group
from django.db import IntegrityError
from django.db.transaction import atomic
from django.core.exceptions import ObjectDoesNotExist, MultipleObjectsReturned, FieldDoesNotExist

from rest_framework.viewsets import GenericViewSet
from rest_framework.response import Response
from rest_framework import status

from MANAGEMENT.AlgSTP.algorithm_stp import gerate_new_cuenta_clabe
from apps.logspolipay.manager import RegisterLog
from apps.users.management import tarjeta_beneficiario
from polipaynewConfig.settings import GRUPO_BRIGADISTA, rfc_Bec

from apps.transaction.exc import ClabeNoExiste, ErrorLongitudCuenta, AdelanteZapopanException, APIInntecException
from apps.permision.permisions import BlocklistPermissionV2
from apps.solicitudes.message import message_email
from apps.transaction.api.web.serializers.serializer_adelante_zapopan import SerializerAltaBeneficiario, \
    SerializerCreateAccount, CreateGrupoPersona, SerializerDocuments

from apps.users.models import persona, grupoPersona

from MANAGEMENT.Utils.utils import random_password, get_id_cuenta_eje, get_id_cuenta_eje_adelante_zapopan
from MANAGEMENT.Standard.errors_responses import MyHttpError
from MANAGEMENT.Standard.success_responses import MyHtppSuccess


# (ChrGil 2022-01-04) Envia correo a beneficiario o a Emisor
class SendMail(ABC):
    @abstractmethod
    def send_mail(self) -> NoReturn:
        ...

    @abstractmethod
    def context_data_email(self) -> NoReturn:
        ...


#__POSIBLE_OBSOLETO
# (ChrGil 2022-01-06) Cuenta y cueta clabe reales
# @dataclass
# class SelectCard:
#     clabe: ClassVar[str]
#     cuenta: ClassVar[str]
#     _last_card_generate: ClassVar[str] = '646180171801807408'
#     _cards: ClassVar[Dict[str, Any]] = {
#         "5129121205297004": "646180171801800900",
#         "5129121205360000": "646180171801800913",
#         "5129121205365009": "646180171801800926",
#         "5129121206062001": "646180171801800939",
#         "5129121209973006": "646180171801800942",
#         "5129121209995009": "646180171801800955",
#         "5129121210004007": "646180171801800968",
#         "5129121210039003": "646180171801800971",
#         "5129121218266004": "646180171801800984",
#         "5129121218353000": "646180171801800997",
#         "5129121218363009": "646180171801801006",
#         "5129121218392008": "646180171801801019",
#         "5129121218606001": "646180171801801022",
#         "5129121218714003": "646180171801801035",
#         "5129121218755006": "646180171801801048",
#         "5129121218772001": "646180171801801051",
#         "5129121259351004": "646180171801801064",
#         "5129121259361003": "646180171801801077",
#         "5129121259375003": "646180171801801080",
#         "5129121259392008": "646180171801801093",
#         "5129121259404001": "646180171801801103",
#         "5129121259415007": "646180171801801116",
#         "5129121259434008": "646180171801801129",
#         "5129121259464005": "646180171801801132",
#         "5129121259486008": "646180171801801145",
#         "5129121259497005": "646180171801801158",
#         "5129121259523008": "646180171801801161",
#         "5129121259543006": "646180171801801174",
#         "5129121259574001": "646180171801801187",
#         "5129121259667003": "646180171801801200",
#         "5129121259688009": "646180171801801213",
#         "5129121259739000": "646180171801801226",
#         "5129121259741006": "646180171801801239",
#         "5129121259758000": "646180171801801242",
#         "5129121259763000": "646180171801801255",
#         "5129121259801008": "646180171801801268",
#         "5129121259804002": "646180171801801284",
#         "5129121259808003": "646180171801801297",
#         "5129121259856002": "646180171801801307",
#         "5129121259869005": "646180171801801310",
#         "5129121259876000": "646180171801801323",
#         "5129121259976008": "646180171801801336",
#         "5129121260008007": "646180171801801349",
#         "5129121260016000": "646180171801801352",
#         "5129121260030001": "646180171801801365",
#         "5129121260033005": "646180171801801378",
#         "5129121260050009": "646180171801801381",
#         "5129121260053003": "646180171801801394",
#         "5129121260095004": "646180171801801404",
#         "5129121260097000": "646180171801801417",
#         "5129121260103006": "646180171801801420",
#         "5129121260108005": "646180171801801433",
#         "5129121260113005": "646180171801801446",
#         "5129121260121008": "646180171801801459",
#         "5129121260129001": "646180171801801462",
#         "5129121260156004": "646180171801801475",
#         "5129121260189005": "646180171801801488",
#         "5129121260283006": "646180171801801491",
#         "5129121260290001": "646180171801801501",
#         "5129121260323000": "646180171801801514",
#         "5129121260326003": "646180171801801527",
#         "5129121260341002": "646180171801801530",
#         "5129121260357008": "646180171801801543",
#         "5129121260383004": "646180171801801556",
#         "5129121260387005": "646180171801801569",
#         "5129121260394001": "646180171801801572",
#         "5129121260418008": "646180171801801585",
#         "5129121260433007": "646180171801801608",
#         "5129121260449003": "646180171801801611",
#         "5129121260492003": "646180171801801624",
#         "5129121260618003": "646180171801801637",
#         "5129121260625008": "646180171801801640",
#         "5129121260664007": "646180171801801653",
#         "5129121260668008": "646180171801801666",
#         "5129121260674006": "646180171801801679",
#         "5129121260703003": "646180171801801682",
#         "5129121261025000": "646180171801801695",
#         "5129121261063001": "646180171801801705",
#         "5129121261101009": "646180171801801718",
#         "5129121261103005": "646180171801801721",
#         "5129121261115009": "646180171801801734",
#         "5129121261138001": "646180171801801747",
#         "5129121261174006": "646180171801801750",
#         "5129121261223001": "646180171801801763",
#         "5129121261239007": "646180171801801776",
#         "5129121261268006": "646180171801801789",
#         "5129121261296007": "646180171801801792",
#         "5129121261315005": "646180171801801802",
#         "5129121261337009": "646180171801801815",
#         "5129121261354004": "646180171801801828",
#         "5129121261390008": "646180171801801844",
#         "5129121261424005": "646180171801801857",
#         "5129121261447006": "646180171801801860",
#         "5129121261500002": "646180171801801886",
#         "5129121261519002": "646180171801801899",
#         "5129121261540008": "646180171801801909",
#         "5129121261547003": "646180171801801912",
#         "5129121261561004": "646180171801801925",
#         "5129121261596000": "646180171801801938",
#         "5129121261600000": "646180171801801941",
#         "5129121261609001": "646180171801801954",
#         "5129121261631005": "646180171801801967",
#         "5129121261633001": "646180171801801970",
#         "5129121261999006": "646180171801801983",
#         "5129121262020000": "646180171801801996",
#         "5129121262070005": "646180171801802005",
#         "5129121262073009": "646180171801802018",
#         "5129121262096000": "646180171801802021",
#         "5129121262112005": "646180171801802034",
#         "5129121262122004": "646180171801802047",
#         "5129121262147001": "646180171801802050",
#         "5129121262175002": "646180171801802063",
#         "5129121262177008": "646180171801802076",
#         "5129121262180002": "646180171801802089",
#         "5129121262219008": "646180171801802092",
#         "5129121262228009": "646180171801802102",
#         "5129121262243008": "646180171801802115",
#         "5129121262244006": "646180171801802128",
#         "5129121262266009": "646180171801802131",
#         "5129121262291007": "646180171801802144",
#         "5129121262303000": "646180171801802157",
#         "5129121262367005": "646180171801802160",
#         "5129121262401002": "646180171801802173",
#         "5129121262405003": "646180171801802186",
#         "5129121262428005": "646180171801802199",
#         "5129121262452005": "646180171801802209",
#         "5129121262463002": "646180171801802212",
#         "5129121262493009": "646180171801802225",
#         "5129121262508004": "646180171801802238",
#         "5129121262549008": "646180171801802241",
#         "5129121262577009": "646180171801802254",
#         "5129121262593006": "646180171801802267",
#         "5129121262598005": "646180171801802270",
#         "5129121262616005": "646180171801802283",
#         "5129121262622003": "646180171801802296",
#         "5129121262626004": "646180171801802306",
#         "5129121262631004": "646180171801802319",
#         "5129121262643009": "646180171801802322",
#         "5129121262724007": "646180171801802335",
#         "5129121262726002": "646180171801802348",
#         "5129121262784001": "646180171801802351",
#         "5129121262790008": "646180171801802364",
#         "5129121262801003": "646180171801802377",
#         "5129121262813008": "646180171801802380",
#         "5129121262825002": "646180171801802393",
#         "5129121262842007": "646180171801802403",
#         "5129121262847006": "646180171801802416",
#         "5129121262864001": "646180171801802429",
#         "5129121262892002": "646180171801802432",
#         "5129121262918005": "646180171801802445",
#         "5129121262930000": "646180171801802458",
#         "5129121262962003": "646180171801802487",
#         "5129121262987000": "646180171801802490",
#         "5129121263019001": "646180171801802526",
#         "5129121263024001": "646180171801802539",
#         "5129121263251000": "646180171801802568",
#         "5129121263277005": "646180171801802571",
#         "5129121263482001": "646180171801802597",
#         "5129121263491002": "646180171801802607",
#         "5129121263579004": "646180171801802610",
#         "5129121263723008": "646180171801802636",
#         "5129121263735002": "646180171801802649",
#         "5129121263736000": "646180171801802652",
#         "5129121263756008": "646180171801802665",
#         "5129121263779000": "646180171801802678",
#         "5129121263803008": "646180171801802681",
#         "5129121271957002": "646180171801802694",
#         "5129121271981002": "646180171801802704",
#         "5129121271984006": "646180171801802717",
#         "5129121272023002": "646180171801802720",
#         "5129121272056002": "646180171801802733",
#         "5129121272060004": "646180171801802746",
#         "5129121272075002": "646180171801802759",
#         "5129121272078006": "646180171801802762",
#         "5129121272080002": "646180171801802775",
#         "5129121272081000": "646180171801802788",
#         "5129121272100008": "646180171801802791",
#         "5129121272132001": "646180171801802801",
#         "5129121272152009": "646180171801802814",
#         "5129121272184002": "646180171801802827",
#         "5129121272202002": "646180171801802830",
#         "5129121272228007": "646180171801802843",
#         "5129121272258004": "646180171801802856",
#         "5129121272270009": "646180171801802869",
#         "5129121272286005": "646180171801802872",
#         "5129121272323006": "646180171801802885",
#         "5129121272356006": "646180171801802898",
#         "5129121272360008": "646180171801802908",
#         "5129121272366005": "646180171801802911",
#         "5129121272424002": "646180171801802924",
#         "5129121272469007": "646180171801802937",
#         "5129121272487009": "646180171801802940",
#         "5129121272617001": "646180171801802953",
#         "5129121272688002": "646180171801802979",
#         "5129121272722009": "646180171801802995",
#         "5129121272768002": "646180171801803004",
#         "5129121272868000": "646180171801803046",
#         "5129121273001007": "646180171801803059",
#         "5129121273012004": "646180171801803062",
#         "5129121273028000": "646180171801803075",
#         "5129121273041003": "646180171801803088",
#         "5129121273053008": "646180171801803091",
#         "5129121273062009": "646180171801803101",
#         "5129121273065002": "646180171801803114",
#         "5129121273087006": "646180171801803127",
#         "5129121273120005": "646180171801803130",
#         "5129121273133008": "646180171801803143",
#         "5129121273163005": "646180171801803156",
#         "5129121273166008": "646180171801803169",
#         "5129121273208008": "646180171801803172",
#         "5129121273305002": "646180171801803185",
#         "5129121206617002": "646180171801803907",
#         "5129121218660008": "646180171801803910",
#         "5129121206663006": "646180171801803923",
#         "5129121206649005": "646180171801803936",
#         "5129121206614009": "646180171801803949",
#         "5129121218499001": "646180171801803952",
#         "5129121218525003": "646180171801803965",
#         "5129121259054004": "646180171801803978",
#         "5129121259053006": "646180171801803981",
#         "5129121259032000": "646180171801803994",
#         "5129121261759004": "646180171801804003",
#         "5129121260827000": "646180171801804016",
#         "5129121260819007": "646180171801804029",
#         "5129121261944002": "646180171801804032",
#         "5129121261977002": "646180171801804045",
#         "5129121260748008": "646180171801804058",
#         "5129121260787006": "646180171801804061",
#         "5129121260769004": "646180171801804074",
#         "5129121261758006": "646180171801804087",
#         "5129121260720007": "646180171801804090",
#         "5129121260739007": "646180171801804100",
#         "5129121260704001": "646180171801804113",
#         "5129121261647001": "646180171801804126",
#         "5129121261645005": "646180171801804139",
#         "5129121261826001": "646180171801804142",
#         "5129121273355007": "646180171801804155",
#         "5129121273643006": "646180171801804168",
#         "5129121273641000": "646180171801804171",
#         "5129121273594001": "646180171801804184",
#         "5129121273583004": "646180171801804197",
#         "5129121273572007": "646180171801804207",
#         "5129121273402007": "646180171801804210",
#         "5129121273394006": "646180171801804223",
#         "5129121273367002": "646180171801804236",
#         "5129121272528000": "646180171801804249",
#         "5129121273435007": "646180171801804252",
#         "5129121273337005": "646180171801804265",
#         "5129121273518000": "646180171801804278",
#         "5129121273446004": "646180171801804281",
#         "5129121273336007": "646180171801804294",
#         "5129121273332006": "646180171801804304",
#         "5129121272569004": "646180171801804317",
#         "5129121272592006": "646180171801804320",
#         "5129121261904006": "646180171801804333",
#         "5129121259043007": "646180171801804346",
#         "5129121261903008": "646180171801804359",
#         "5129121261882004": "646180171801804362",
#         "5129121261856008": "646180171801804375",
#         "5129121259169000": "646180171801804388",
#         "5129121259175007": "646180171801804391",
#         "5129121259185006": "646180171801804401",
#         "5129121259187002": "646180171801804414",
#         "5129121259204005": "646180171801804427",
#         "5129121272549006": "646180171801804430",
#         "5129121274124006": "646180171801804443",
#         "5129121274122000": "646180171801804456",
#         "5129121274121002": "646180171801804469",
#         "5129121274099000": "646180171801804472",
#         "5129121273331008": "646180171801804485",
#         "5129121259108008": "646180171801804498",
#         "5129121259151008": "646180171801804508",
#         "5129121273645001": "646180171801804511",
#         "5129121273328004": "646180171801804524",
#         "5129121273322007": "646180171801804537",
#         "5129121274147007": "646180171801804540",
#         "5129121274136000": "646180171801804553",
#         "5129121206580002": "646180171801804566",
#         "5129121261661002": "646180171801804579",
#         "5129121261672009": "646180171801804582",
#         "5129121261724008": "646180171801804595",
#         "5129121261756000": "646180171801804605",
#         "5129121261747009": "646180171801804618",
#         "5129121206607003": "646180171801804621",
#         "5129121206490004": "646180171801804634",
#         "5129121206587007": "646180171801804647",
#         "5129121206469008": "646180171801804650",
#         "5129121218598000": "646180171801804663",
#         "5129121206491002": "646180171801804676",
#         "5129121271942004": "646180171801804689",
#         "5129121218573003": "646180171801804692",
#         "5129121273556000": "646180171801804702",
#         "5129121273542000": "646180171801804715",
#         "5129121273522002": "646180171801804728",
#         "5129121260993000": "646180171801804731",
#         "5129121260883003": "646180171801804744",
#         "5129121260878003": "646180171801804757",
#         "5129121260975007": "646180171801804760",
#         "5129121260959001": "646180171801804773",
#         "5129121260958003": "646180171801804786",
#         "5129121260923007": "646180171801804799",
#         "5129121259321007": "646180171801804809",
#         "5129121259290004": "646180171801804812",
#         "5129121259248002": "646180171801804825",
#         "5129121218592003": "646180171801804838",
#         "5129121206373002": "646180171801804841",
#         "5129121205468001": "646180171801804854",
#         "5129121261775000": "646180171801804867",
#         "5129121205435000": "646180171801804870",
#         "5129121274168003": "646180171801804883",
#         "5129121261799000": "646180171801804896",
#         "5129121222000001": "456512151545451212"
#     }
#
#   def get_card(self, card: str) -> Tuple[str, str]:
#       clabe = self._cards.get(card)
#       numero_cuenta = self.get_cuenta(clabe)
#       return clabe, numero_cuenta
#
#   def get_cuenta(self, clabe: str) -> str:
#       if clabe is None:
#           raise ValueError('Tarjeta no encontrada')
#
#       return clabe[7:17]

#     (ChrGil 2022-01-30) Se comenta codigo hasta que este autorizado
#     def __init__(self, card: str):
#         self.clabe = self._cards.get(card)
#
#         if self.clabe is None:
#             self.clabe = gerate_new_cuenta_clabe(self._last_card_generate)
#
#         self.cuenta = self.get_cuenta(self.clabe)
#
#     def get_cuenta(self, clabe: str) -> str:
#         return clabe[7:17]


# (ChrGil 2022-01-06) Tarjeta y cuenta de prueba
@dataclass
class SelectCard:
    clabe: ClassVar[str]
    cuenta: ClassVar[str]
    _last_card_generate: ClassVar[str] = '111180111301807408'
    _cards: ClassVar[Dict[str, Any]] = {
        "6659884205297004": "111180111301800900",
        "6659884205360000": "111180111301800913",
        "6659884205365009": "111180111301800926",
        "6659884206062001": "111180111301800939",
        "6659884209973006": "111180111301800942",
        "6659884209995009": "111180111301800955",
        "6659884210004007": "111180111301800968",
        "6659884210039003": "111180111301800971",
        "6659884218266004": "111180111301800984",
        "6659884218353000": "111180111301800997",
        "6659884218363009": "111180111301801006",
        "6659884218392008": "111180111301801019",
        "6659884218606001": "111180111301801022",
        "6659884218714003": "111180111301801035",
        "6659884218755006": "111180111301801048",
        "6659884218772001": "111180111301801051",
        "6659884259351004": "111180111301801064",
        "6659884259361003": "111180111301801077",
        "6659884259375003": "111180111301801080",
        "6659884259392008": "111180111301801093",
        "6659884259404001": "111180111301801103",
        "6659884259415007": "111180111301801116",
        "6659884259434008": "111180111301801129",
        "6659884259464005": "111180111301801132",
        "6659884259486008": "111180111301801145",
        "6659884259497005": "111180111301801158",
        "6659884259523008": "111180111301801161",
        "6659884259543006": "111180111301801174",
        "6659884259574001": "111180111301801187",
        "6659884259667003": "111180111301801200",
        "6659884259688009": "111180111301801213",
        "6659884259739000": "111180111301801226",
        "6659884259741006": "111180111301801239",
        "6659884259758000": "111180111301801242",
        "6659884259763000": "111180111301801255",
        "6659884259801008": "111180111301801268",
        "6659884259804002": "111180111301801284",
        "6659884259808003": "111180111301801297",
        "6659884259856002": "111180111301801307",
        "6659884259869005": "111180111301801310",
        "6659884259876000": "111180111301801323",
        "6659884259976008": "111180111301801336",
        "6659884260008007": "111180111301801349",
        "6659884260016000": "111180111301801352",
        "6659884260030001": "111180111301801365",
        "6659884260033005": "111180111301801378",
        "6659884260050009": "111180111301801381",
        "6659884260053003": "111180111301801394",
        "6659884260095004": "111180111301801404",
        "6659884260097000": "111180111301801417",
        "6659884260103006": "111180111301801420",
        "6659884260108005": "111180111301801433",
        "6659884260113005": "111180111301801446",
        "6659884260121008": "111180111301801459",
        "6659884260129001": "111180111301801462",
        "6659884260156004": "111180111301801475",
        "6659884260189005": "111180111301801488",
        "6659884260283006": "111180111301801491",
        "6659884260290001": "111180111301801501",
        "6659884260323000": "111180111301801514",
        "6659884260326003": "111180111301801527",
        "6659884260341002": "111180111301801530",
        "6659884260357008": "111180111301801543",
        "6659884260383004": "111180111301801556",
        "6659884260387005": "111180111301801569",
        "6659884260394001": "111180111301801572",
        "6659884260418008": "111180111301801585",
        "6659884260433007": "111180111301801608",
        "6659884260449003": "111180111301801611",
        "6659884260492003": "111180111301801624",
        "6659884260618003": "111180111301801637",
        "6659884260625008": "111180111301801640",
        "6659884260664007": "111180111301801653",
        "6659884260668008": "111180111301801666",
        "6659884260674006": "111180111301801679",
        "6659884260703003": "111180111301801682",
        "6659884261025000": "111180111301801695",
        "6659884261063001": "111180111301801705",
        "6659884261101009": "111180111301801718",
        "6659884261103005": "111180111301801721",
        "6659884261115009": "111180111301801734",
        "6659884261138001": "111180111301801747",
        "6659884261174006": "111180111301801750",
        "6659884261223001": "111180111301801763",
        "6659884261239007": "111180111301801776",
        "6659884261268006": "111180111301801789",
        "6659884261296007": "111180111301801792",
        "6659884261315005": "111180111301801802",
        "6659884261337009": "111180111301801815",
        "6659884261354004": "111180111301801828",
        "6659884261390008": "111180111301801844",
        "6659884261424005": "111180111301801857",
        "6659884261447006": "111180111301801860",
        "6659884261500002": "111180111301801886",
        "6659884261519002": "111180111301801899",
        "6659884261540008": "111180111301801909",
        "6659884261547003": "111180111301801912",
        "6659884261561004": "111180111301801925",
        "6659884261596000": "111180111301801938",
        "6659884261600000": "111180111301801941",
        "6659884261609001": "111180111301801954",
        "6659884261631005": "111180111301801967",
        "6659884261633001": "111180111301801970",
        "6659884261999006": "111180111301801983",
        "6659884262020000": "111180111301801996",
        "6659884262070005": "111180111301802005",
        "6659884262073009": "111180111301802018",
        "6659884262096000": "111180111301802021",
        "6659884262112005": "111180111301802034",
        "6659884262122004": "111180111301802047",
        "6659884262147001": "111180111301802050",
        "6659884262175002": "111180111301802063",
        "6659884262177008": "111180111301802076",
        "6659884262180002": "111180111301802089",
        "6659884262219008": "111180111301802092",
        "6659884262228009": "111180111301802102",
        "6659884262243008": "111180111301802115",
        "6659884262244006": "111180111301802128",
        "6659884262266009": "111180111301802131",
        "6659884262291007": "111180111301802144",
        "6659884262303000": "111180111301802157",
        "6659884262367005": "111180111301802160",
        "6659884262401002": "111180111301802173",
        "6659884262405003": "111180111301802186",
        "6659884262428005": "111180111301802199",
        "6659884262452005": "111180111301802209",
        "6659884262463002": "111180111301802212",
        "6659884262493009": "111180111301802225",
        "6659884262508004": "111180111301802238",
        "6659884262549008": "111180111301802241",
        "6659884262577009": "111180111301802254",
        "6659884262593006": "111180111301802267",
        "6659884262598005": "111180111301802270",
        "6659884262616005": "111180111301802283",
        "6659884262622003": "111180111301802296",
        "6659884262626004": "111180111301802306",
        "6659884262631004": "111180111301802319",
        "6659884262643009": "111180111301802322",
        "6659884262724007": "111180111301802335",
        "6659884262726002": "111180111301802348",
        "6659884262784001": "111180111301802351",
        "6659884262790008": "111180111301802364",
        "6659884262801003": "111180111301802377",
        "6659884262813008": "111180111301802380",
        "6659884262825002": "111180111301802393",
        "6659884262842007": "111180111301802403",
        "6659884262847006": "111180111301802416",
        "6659884262864001": "111180111301802429",
        "6659884262892002": "111180111301802432",
        "6659884262918005": "111180111301802445",
        "6659884262930000": "111180111301802458",
        "6659884262962003": "111180111301802487",
        "6659884262987000": "111180111301802490",
        "6659884263019001": "111180111301802526",
        "6659884263024001": "111180111301802539",
        "6659884263251000": "111180111301802568",
        "6659884263277005": "111180111301802571",
        "6659884263482001": "111180111301802597",
        "6659884263491002": "111180111301802607",
        "6659884263579004": "111180111301802610",
        "6659884263723008": "111180111301802636",
        "6659884263735002": "111180111301802649",
        "6659884263736000": "111180111301802652",
        "6659884263756008": "111180111301802665",
        "6659884263779000": "111180111301802678",
        "6659884263803008": "111180111301802681",
        "6659884271957002": "111180111301802694",
        "6659884271981002": "111180111301802704",
        "6659884271984006": "111180111301802717",
        "6659884272023002": "111180111301802720",
        "6659884272056002": "111180111301802733",
        "6659884272060004": "111180111301802746",
        "6659884272075002": "111180111301802759",
        "6659884272078006": "111180111301802762",
        "6659884272080002": "111180111301802775",
        "6659884272081000": "111180111301802788",
        "6659884272100008": "111180111301802791",
        "6659884272132001": "111180111301802801",
        "6659884272152009": "111180111301802814",
        "6659884272184002": "111180111301802827",
        "6659884272202002": "111180111301802830",
        "6659884272228007": "111180111301802843",
        "6659884272258004": "111180111301802856",
        "6659884272270009": "111180111301802869",
        "6659884272286005": "111180111301802872",
        "6659884272323006": "111180111301802885",
        "6659884272356006": "111180111301802898",
        "6659884272360008": "111180111301802908",
        "6659884272366005": "111180111301802911",
        "6659884272424002": "111180111301802924",
        "6659884272469007": "111180111301802937",
        "6659884272487009": "111180111301802940",
        "6659884272617001": "111180111301802953",
        "6659884272688002": "111180111301802979",
        "6659884272722009": "111180111301802995",
        "6659884272768002": "111180111301803004",
        "6659884272868000": "111180111301803046",
        "6659884273001007": "111180111301803059",
        "6659884273012004": "111180111301803062",
        "6659884273028000": "111180111301803075",
        "6659884273041003": "111180111301803088",
        "6659884273053008": "111180111301803091",
        "6659884273062009": "111180111301803101",
        "6659884273065002": "111180111301803114",
        "6659884273087006": "111180111301803127",
        "6659884273120005": "111180111301803130",
        "6659884273133008": "111180111301803143",
        "6659884273163005": "111180111301803156",
        "6659884273166008": "111180111301803169",
        "6659884273208008": "111180111301803172",
        "6659884273305002": "111180111301803185",
        "6659884206617002": "111180111301803907",
        "6659884218660008": "111180111301803910",
        "6659884206663006": "111180111301803923",
        "6659884206649005": "111180111301803936",
        "6659884206614009": "111180111301803949",
        "6659884218499001": "111180111301803952",
        "6659884218525003": "111180111301803965",
        "6659884259054004": "111180111301803978",
        "6659884259053006": "111180111301803981",
        "6659884259032000": "111180111301803994",
        "6659884261759004": "111180111301804003",
        "6659884260827000": "111180111301804016",
        "6659884260819007": "111180111301804029",
        "6659884261944002": "111180111301804032",
        "6659884261977002": "111180111301804045",
        "6659884260748008": "111180111301804058",
        "6659884260787006": "111180111301804061",
        "6659884260769004": "111180111301804074",
        "6659884261758006": "111180111301804087",
        "6659884260720007": "111180111301804090",
        "6659884260739007": "111180111301804100",
        "6659884260704001": "111180111301804113",
        "6659884261647001": "111180111301804126",
        "6659884261645005": "111180111301804139",
        "6659884261826001": "111180111301804142",
        "6659884273355007": "111180111301804155",
        "6659884273643006": "111180111301804168",
        "6659884273641000": "111180111301804171",
        "6659884273594001": "111180111301804184",
        "6659884273583004": "111180111301804197",
        "6659884273572007": "111180111301804207",
        "6659884273402007": "111180111301804210",
        "6659884273394006": "111180111301804223",
        "6659884273367002": "111180111301804236",
        "6659884272528000": "111180111301804249",
        "6659884273435007": "111180111301804252",
        "6659884273337005": "111180111301804265",
        "6659884273518000": "111180111301804278",
        "6659884273446004": "111180111301804281",
        "6659884273336007": "111180111301804294",
        "6659884273332006": "111180111301804304",
        "6659884272569004": "111180111301804317",
        "6659884272592006": "111180111301804320",
        "6659884261904006": "111180111301804333",
        "6659884259043007": "111180111301804346",
        "6659884261903008": "111180111301804359",
        "6659884261882004": "111180111301804362",
        "6659884261856008": "111180111301804375",
        "6659884259169000": "111180111301804388",
        "6659884259175007": "111180111301804391",
        "6659884259185006": "111180111301804401",
        "6659884259187002": "111180111301804414",
        "6659884259204005": "111180111301804427",
        "6659884272549006": "111180111301804430",
        "6659884274124006": "111180111301804443",
        "6659884274122000": "111180111301804456",
        "6659884274121002": "111180111301804469",
        "6659884274099000": "111180111301804472",
        "6659884273331008": "111180111301804485",
        "6659884259108008": "111180111301804498",
        "6659884259151008": "111180111301804508",
        "6659884273645001": "111180111301804511",
        "6659884273328004": "111180111301804524",
        "6659884273322007": "111180111301804537",
        "6659884274147007": "111180111301804540",
        "6659884274136000": "111180111301804553",
        "6659884206580002": "111180111301804566",
        "6659884261661002": "111180111301804579",
        "6659884261672009": "111180111301804582",
        "6659884261724008": "111180111301804595",
        "6659884261756000": "111180111301804605",
        "6659884261747009": "111180111301804618",
        "6659884206607003": "111180111301804621",
        "6659884206490004": "111180111301804634",
        "6659884206587007": "111180111301804647",
        "6659884206469008": "111180111301804650",
        "6659884218598000": "111180111301804663",
        "6659884206491002": "111180111301804676",
        "6659884271942004": "111180111301804689",
        "6659884218573003": "111180111301804692",
        "6659884273556000": "111180111301804702",
        "6659884273542000": "111180111301804715",
        "6659884273522002": "111180111301804728",
        "6659884260993000": "111180111301804731",
        "6659884260883003": "111180111301804744",
        "6659884260878003": "111180111301804757",
        "6659884260975007": "111180111301804760",
        "6659884260959001": "111180111301804773",
        "6659884260958003": "111180111301804786",
        "6659884260923007": "111180111301804799",
        "6659884259321007": "111180111301804809",
        "6659884259290004": "111180111301804812",
        "6659884259248002": "111180111301804825",
        "6659884218592003": "111180111301804838",
        "6659884206373002": "111180111301804841",
        "6659884205468001": "111180111301804854",
        "6659884261775000": "111180111301804867",
        "6659884205435000": "111180111301804870",
        "6659884274168003": "111180111301804883",
        "6659884261799000": "111180111301804896",
        "6659884259808009": "111180111301807804",
        "9900005910047048": "111480111101844517",
        "9900005910087088": "111480111101812117",
        "9900005910088089": "111480111101811207",
        "9900005910089090": "111480111101998817",
        "9900005910091092": "111480111101812127",
        "9900005910093094": "111480111101801207",
        "9900005910081082": "111480111101833697",
        "9900005910082083": "111480111101125567",
        "9900005910083084": "111480111101001247",
        "9900005910084085": "111480111101155867",
        "9900005910085086": "111480111101801157",
        "9900005910086087": "111480111101115867",
        "9900005910075076": "111480111115180567",
        "9900005910076077": "111480111101812187",
        "9900005910077078": "111480111101445117",
        "9900005910078079": "111480111101855517",
        "9900005910079080": "111480111101403237",
        "9900005910080081": "111480111101845117",
        "9900005910069070": "111480111101112867",
        "9900005910070071": "111480111101815867",
        "9900005910071072": "111480111101120867",
        "9900005910072073": "111480111101122267",
        "9900005910073074": "111480111101459567",
        "9900005910074075": "111480111101833267",
        "9900005910062063": "111480111101124817",
        "9900005910057058": "111480111101113657",
        "9900005910048049": "111480111101002147",
        "9900005910049050": "111480111101454812",
        "9900005910050051": "111480111101112369",
        "9900005910051052": "111480111101112302",
        "9900005910055056": "111480111101120023"
    }

    def get_card(self, card: str) -> Tuple[str, str]:
        clabe = self._cards.get(card)
        numero_cuenta = self.get_cuenta(clabe)
        return clabe, numero_cuenta

    def get_cuenta(self, clabe: str) -> str:
        if clabe is None:
            raise ValueError('Tarjeta no encontrada')

        return clabe[7:17]

    # (ChrGil 2022-01-30) Se comenta codigo hasta que este autroizado
    # def __init__(self, card: str):
    #     self.clabe = self._cards.get(card)
    #
    #     if self.clabe is None:
    #         self.clabe = gerate_new_cuenta_clabe(self._last_card_generate)
    #
    #     self.cuenta = self.get_cuenta(self.clabe)
    #
    # def get_cuenta(self, clabe: str) -> str:
    #     return clabe[7:17]


class RequestDataPersonalExterno:
    _password: ClassVar[str]
    _default_rfc: ClassVar[str] = rfc_Bec
    _default_date: ClassVar[str] = '1900-01-01'

    def __init__(self, data: Dict[str, Any]):
        self.data = data
        self._password = self.get_random_password

    @property
    def get_name(self) -> str:
        return self.data.get('name').title()

    @property
    def get_last_name(self) -> str:
        if not (self.data.get('second_last_name') is None) and not (self.data.get('first_last_name') is None):
            return f"{self.data.get('first_last_name')}*{self.data.get('second_last_name')}".title()

        if self.data.get('first_last_name') is not None:
            return f"{self.data.get('first_last_name')}*".title()

        if self.data.get('second_last_name') is not None:
            return f"*{self.data.get('second_last_name')}".title()

        if (self.data.get('second_last_name') is None) and (self.data.get('first_last_name') is None):
            return "*"

    @property
    def get_birth_date(self) -> str:
        birth_date = self.data.get('birth_date')
        if birth_date is None:
            return self._default_date
        return birth_date

    @property
    def get_rfc(self) -> str:
        rfc = self.data.get('rfc')
        if rfc is None:
            return self._default_rfc
        return rfc.upper()

    @property
    def get_mail(self) -> str:
        return self.data.get('mail')

    @property
    def get_description_activities(self) -> str:
        return self.data.get('description_activities')

    @property
    def get_file(self) -> str:
        return self.data.get('file')

    @property
    def get_card_number(self) -> str:
        return self.data.get('card_number')

    @property
    def get_password(self) -> str:
        return self._password

    @property
    def get_random_password(self) -> str:
        return random_password()

    def set_password(self):
        self.data.update({"password": self._password})


class AltaPersonalExterno:
    _serializer_class: ClassVar[SerializerAltaBeneficiario] = SerializerAltaBeneficiario
    person_id: ClassVar[int]

    def __init__(self, request_data: RequestDataPersonalExterno):
        self.request_data = request_data
        self.person_id = 0

    def data(self) -> Dict[str, Any]:
        return {
            "name": self.request_data.get_name,
            "last_name": self.request_data.get_last_name,
            "birth_date": self.request_data.get_birth_date,
            "rfc": self.request_data.get_rfc,
            "mail": self.request_data.get_mail,
            "description_activities": self.request_data.get_description_activities,
            "password": self.request_data.get_password
        }

    def create(self):
        serializer = self._serializer_class(data=self.data())
        serializer.is_valid(raise_exception=True)
        self.person_id = serializer.create()


class CreateAccountBeneficiario:
    _clabe: ClassVar[str]
    _cuenta: ClassVar[str]
    _serializer_class: ClassVar[SerializerCreateAccount] = SerializerCreateAccount

    def __init__(self, request_data: RequestDataPersonalExterno, person: AltaPersonalExterno):
        self.request_data = request_data
        self.person = person
        self._clabe = None
        self._cuenta = None

    def get_account(self) -> str:
        return self._cuenta

    def get_card(self):
        card = SelectCard()
        clabe, numero_cuenta = card.get_card(self.request_data.get_card_number)

        if len(numero_cuenta) != 10:
            raise ErrorLongitudCuenta('Numero de cuenta no valido')

        if len(clabe) != 18:
            raise ErrorLongitudCuenta('Cuenta clabe no valida')

        self._clabe = clabe
        self._cuenta = numero_cuenta

        # (ChrGil 2022-01-30) Descomentar cuando sea autorizado
        # card = SelectCard(card=self.request_data.get_card_number)
        #
        # if len(card.cuenta) != 10:
        #     raise ErrorLongitudCuenta('Numero de cuenta no valido')
        #
        # if len(card.clabe) != 18:
        #     raise ErrorLongitudCuenta('Cuenta clabe no valida')
        #
        # self._clabe = card.clabe
        # self._cuenta = card.cuenta

    def data(self) -> Dict[str, Any]:
        return {
            "persona_cuenta_id": self.person.person_id,
            "cuenta": self._cuenta,
            "cuentaclave": self._clabe,
            "numero_tarjeta": self.request_data.get_card_number
        }

    def create(self):
        self.get_card()
        serializer = self._serializer_class(data=self.data())
        serializer.is_valid(raise_exception=True)
        serializer.create()


class AddPersonModelGrupoPersona:
    _defaul_group_name: ClassVar[str] = 'Personal Externo'
    _defaul_relacion_grupo: ClassVar[int] = 6
    _serializer_class: ClassVar[CreateGrupoPersona] = CreateGrupoPersona

    def __init__(
            self,
            person: AltaPersonalExterno,
            empresa_id: int,
            relacion_grupo: Union[int, None] = None,
            nombre_grupo: Union[str, None] = None
    ):

        self.person = person
        self.empresa_id = empresa_id

        if relacion_grupo is not None:
            self._defaul_relacion_grupo = relacion_grupo

        if nombre_grupo is not None:
            self._defaul_group_name = nombre_grupo

    def data(self) -> Dict[str, Any]:
        return {
            "empresa_id": self.empresa_id,
            "person_id": self.person.person_id,
            "nombre_grupo": self._defaul_group_name,
            "relacion_grupo_id": self._defaul_relacion_grupo
        }

    def create(self):
        serializer = self._serializer_class(data=self.data())
        serializer.is_valid(raise_exception=True)
        serializer.create()


class CreateDocument:
    _serializer_class: ClassVar[SerializerDocuments] = SerializerDocuments

    def __init__(self, request_data: RequestDataPersonalExterno, person: AltaPersonalExterno):
        self.request_data = request_data
        self.person = person

        if request_data.get_file:
            self.create()
        ...

    def data(self) -> Dict[str, Any]:
        return {
            "tipo": 6,
            "owner": self.person.person_id,
            "comment": None,
            "base64_file": self.request_data.get_file
        }

    def create(self):
        serializer = self._serializer_class(data=self.data())
        serializer.is_valid(raise_exception=True)
        serializer.create()


@dataclass
class SendMailBeneficario(SendMail):
    request_data: RequestDataPersonalExterno

    @property
    def context_data_email(self) -> Dict[str, Any]:
        return {
            "name": self.request_data.get_name,
            "usario": self.request_data.get_mail,
            "pass": self.request_data.get_password
        }

    def send_mail(self) -> NoReturn:
        message_email(
            template_name='welcomePersonaExterna.html',
            context=self.context_data_email,
            title='Beneficiario',
            body="Beneficiario",
            email=self.context_data_email.get('usario')
        )


@dataclass
class AltaTarjeta:
    request_data: RequestDataPersonalExterno
    razon_social_id: int
    beneficiario: AltaPersonalExterno
    _prod: ClassVar[int] = False

    def create(self):
        tarjeta_beneficiario(
            numero_tarjeta_beneficiario=self.request_data.get_card_number,
            cuenta_eje_id=self.razon_social_id,
            beneficiario_id=self.beneficiario.person_id,
            prod=self._prod
        )


# (ChrGil 2022-01-06) Se crea beneficiario de zapopan (Temporal)
class CreateBeneficiarioAdelanteZapopan(GenericViewSet):
    permission_classes = (BlocklistPermissionV2,)
    permisos = ["Crear personal externo por cuenta eje"]

    def create(self, request):
        log = RegisterLog(request.user, request)
        try:
            brigadista: int = request.user.get_only_id()
            razon_social_id = get_id_cuenta_eje_adelante_zapopan(brigadista)
            log.json_request(request.data)

            with atomic():
                request_data = RequestDataPersonalExterno(request.data)
                beneficiario = AltaPersonalExterno(request_data)
                beneficiario.create()

                cuenta_beneficiario = CreateAccountBeneficiario(request_data, beneficiario)
                cuenta_beneficiario.create()

                AltaTarjeta(request_data, razon_social_id, beneficiario).create()

                agrega_beneficiario_a_grupo = AddPersonModelGrupoPersona(beneficiario, empresa_id=razon_social_id)
                agrega_beneficiario_a_grupo.create()

                agrega_historial = AddPersonModelGrupoPersona(
                    person=beneficiario,
                    empresa_id=brigadista,
                    relacion_grupo=12,
                    nombre_grupo="Brigadista - Personal Externo")
                agrega_historial.create()

                CreateDocument(request_data, beneficiario)
                send = SendMailBeneficario(request_data)
                send.send_mail()

        except ObjectDoesNotExist as e:
            message = 'Ocurrio un error durante el proceso de creación de un beneficiario'
            err = MyHttpError(message=message, real_error=str(e), error_desc=None)
            log.json_response(err.standard_error_responses())
            return Response(err.standard_error_responses(), status=status.HTTP_404_NOT_FOUND)

        except (MultipleObjectsReturned, FieldDoesNotExist, IntegrityError) as e:
            message = 'Ocurrio un error durante el proceso de creación de un beneficiario'
            err = MyHttpError(message=message, real_error=str(e), error_desc=None)
            log.json_response(err.standard_error_responses())
            return Response(err.standard_error_responses(), status=status.HTTP_400_BAD_REQUEST)

        except AdelanteZapopanException as e:
            message = 'Ocurrio un error durante el proceso de creación de un beneficiario'
            err = MyHttpError(message=message, real_error=str(e))
            log.json_response(err.standard_error_responses())
            return Response(err.standard_error_responses(), status=status.HTTP_400_BAD_REQUEST)

        except APIInntecException as e:
            message = 'Ocurrio un error durante el proceso de asiganción de tarjetas Inntec'
            err = MyHttpError(message=message, real_error=e.msg, error_desc=e.detail)
            log.json_response(err.standard_error_responses())
            return Response(err.standard_error_responses(), status=status.HTTP_400_BAD_REQUEST)

        else:
            succ = MyHtppSuccess(message="Beneficiario registrado de manera exitosa")
            log.json_response(succ.standard_success_responses())
            return Response(succ.standard_success_responses(), status=status.HTTP_201_CREATED)


class ResquestDataAltaBrigadista:
    _password: ClassVar[str]

    def __init__(self, data: Dict[str, Any]):
        self.data = data
        self._password = self.get_random_password

    @property
    def get_name(self) -> str:
        return self.data.get('name').title()

    @property
    def get_last_name(self) -> str:
        if not (self.data.get('a_materno') is None) and not (self.data.get('a_paterno') is None):
            return f"{self.data.get('a_paterno')}*{self.data.get('a_materno')}".title()

        if self.data.get('a_paterno') is not None:
            return f"{self.data.get('a_paterno')}*".title()

        if self.data.get('a_materno') is not None:
            return f"*{self.data.get('a_materno')}".title()

        if (self.data.get('a_materno') is None) and (self.data.get('a_paterno') is None):
            return "*"

    @property
    def get_mail(self) -> str:
        return self.data.get('email')

    @property
    def get_password(self) -> str:
        return self._password

    @property
    def get_random_password(self) -> str:
        return random_password()

    def set_password(self):
        self.data.update({"password": self._password})

    @property
    def get_phone(self) -> str:
        return self.data.get('phone')


class AltaBrigadista(ABC):
    @abstractmethod
    def create(self) -> NoReturn:
        ...

    @abstractmethod
    def add_permission(self) -> NoReturn:
        ...


class NuevoBrigadista(AltaBrigadista):
    person_id: ClassVar[int]

    def __init__(self, data: ResquestDataAltaBrigadista):
        self.request_data = data
        self.request_data.set_password()
        self.person_id = 0

    @property
    def data(self) -> Dict[str, Any]:
        return {
            "email": self.request_data.get_mail,
            "name": self.request_data.get_name,
            "last_name": self.request_data.get_last_name,
            "phone": self.request_data.get_phone,
            "password": self.request_data.get_password
        }

    def create(self):
        self.person_id = persona.objects.create_brigadista(**self.data)
        self.add_permission()

    def add_permission(self) -> NoReturn:
        query_group = Group.objects.get(id=GRUPO_BRIGADISTA)
        user = persona.objects.get(id=self.person_id)
        user.groups.add(query_group)


@dataclass
class AgregaARazonSocial:
    razon_social_id: int
    brigadista: NuevoBrigadista

    def create(self):
        grupoPersona.objects.create(
            empresa_id=self.razon_social_id,
            person_id=self.brigadista.person_id,
            nombre_grupo='Brigadista',
            is_admin=False,
            relacion_grupo_id=13
        )


@dataclass
class SendMailBrigadista(SendMail):
    request_data: ResquestDataAltaBrigadista

    @property
    def context_data_email(self) -> Dict[str, Any]:
        return {
            "name": self.request_data.get_name,
            "email": self.request_data.get_mail,
            "pass": self.request_data.get_password
        }

    def send_mail(self) -> NoReturn:
        message_email(
            template_name='welcome_brigadista_zapopan.html',
            context=self.context_data_email,
            title='Brigadista',
            body="Brigadista",
            email=self.context_data_email.get('email')
        )


# (ChrGil 2022-01-06) Alta brigadista (Temporal)
class AltaBrigadistaZapopan(GenericViewSet):
    def create(self, request):
        log = RegisterLog(request.user, request)
        try:

            # (ChrGil 2022-01-06) Se deja para Pruebas, pero en tester va a cambiar
            admin: int = request.user.get_only_id()
            razon_social_id = get_id_cuenta_eje(admin)
            log.json_request(request.data)

            with atomic():
                request_data = ResquestDataAltaBrigadista(request.data)
                user = NuevoBrigadista(request_data)
                user.create()
                AgregaARazonSocial(razon_social_id, user).create()
                SendMailBrigadista(request_data).send_mail()

        except ObjectDoesNotExist as e:
            message = 'Ocurrio un error durante el proceso de creación de un beneficiario'
            err = MyHttpError(message=message, real_error=str(e), error_desc=None)
            log.json_response(err.standard_error_responses())
            return Response(err.standard_error_responses(), status=status.HTTP_404_NOT_FOUND)

        except (MultipleObjectsReturned, FieldDoesNotExist, IntegrityError) as e:
            message = 'Ocurrio un error durante el proceso de creación de un beneficiario'
            err = MyHttpError(message=message, real_error=str(e), error_desc=None)
            log.json_response(err.standard_error_responses())
            return Response(err.standard_error_responses(), status=status.HTTP_404_NOT_FOUND)

        else:
            succ = MyHtppSuccess(message="Brigadista creado existosamente")
            log.json_response(succ.standard_success_responses())
            return Response(succ.standard_success_responses(), status=status.HTTP_201_CREATED)
